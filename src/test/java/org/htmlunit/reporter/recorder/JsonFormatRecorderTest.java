/*
 * Copyright (c) 2002-2025 Gargoyle Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.htmlunit.reporter.recorder;

import org.htmlunit.reporter.formatter.JsonFormatter;
import org.htmlunit.reporter.record.IRecord;
import org.htmlunit.reporter.record.Record;
import org.htmlunit.reporter.record.RecordType;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

/**
 * Unit tests for the {@code JsonFormatRecorder} class.
 * This class verifies the functionality of saving individual or multiple test records
 * in JSON format and ensures the output matches the expected formatted content.
 *
 * @author Akif Esad
 */
public class JsonFormatRecorderTest {

    private static final String TEST_OUTPUT_PATH = "test_output";
    private JsonFormatRecorder recorder_;

    /**
     * Set recorder before test started.
     *
     * @author Akif esad
     */
    @Before
    public void setUp() {
        recorder_ = new JsonFormatRecorder(TEST_OUTPUT_PATH, false);
    }

    /**
     * Delete files when tests are finished.
     * @throws IOException throwable exception during file deleting.
     *
     * @author Akif Esad
     */
    @After
    public void tearDown() throws IOException {
        Files.deleteIfExists(Paths.get(TEST_OUTPUT_PATH + ".json"));
    }

    /**
     * Tests the ability of the {@code JsonFormatRecorder} class to save a single record,
     * ensuring the saved file exists and its content matches the expected formatted JSON output.
     *
     * This method:
     * 1. Creates a single test record of type {@code IRecord}.
     * 2. Saves the record using the {@code saveRecord} method of the {@code JsonFormatRecorder}.
     * 3. Closes the writer to finalize the recording process.
     * 4. Verifies the existence of the generated JSON output file.
     * 5. Reads the file content and compares it against the expected JSON format
     *    generated by the {@code JsonFormatter}.
     *
     * @throws IOException if there are errors during file handling or record saving operations
     *
     * @author Akif Esad
     */
    @Test
    public void testSaveRecord() throws IOException {
        final IRecord record = new Record("testSingle", "classSingle", RecordType.Html_Record, "statusSingle");
        recorder_.saveRecord(record);
        recorder_.close();

        final File file = new File(TEST_OUTPUT_PATH + ".json");
        assertTrue(file.exists());

        final String content = new String(Files.readAllBytes(file.toPath()));
        final JsonFormatter formatter = new JsonFormatter();
        final String expectedContent = formatter.format(record, recorder_.getRecorderUUID());
        assertEquals(expectedContent, content);
    }

    /**
     * Tests the functionality of saving multiple records using the {@code JsonFormatRecorder} class.
     * This test ensures the saved file exists and contains the correctly formatted JSON content
     * that matches the expected output.
     *
     * This method:
     * 1. Creates a list of multiple test records of type {@code IRecord}.
     * 2. Saves the records using the {@code saveRecords} method of the {@code JsonFormatRecorder}.
     * 3. Closes the writer to finalize the recording process.
     * 4. Verifies the existence of the generated JSON output file.
     * 5. Reads the file content and verifies it matches the expected JSON format
     *    generated by the {@code JsonFormatter}.
     *
     * @throws IOException if any error occurs during file handling or record saving operations
     *
     * @author Akif Esad
     */
    @Test
    public void testSaveRecords() throws IOException {
        final List<IRecord> records = new ArrayList<>();
        records.add(new Record("test1", "class1", RecordType.Html_Record, "status1"));
        records.add(new Record("test2", "class2", RecordType.Html_Record, "status2"));
        recorder_.saveRecords(records);
        recorder_.close();

        final File file = new File(TEST_OUTPUT_PATH + ".json");
        assertTrue(file.exists());

        final String content = new String(Files.readAllBytes(file.toPath()));
        final JsonFormatter formatter = new JsonFormatter();
        final String expectedContent = formatter.format(records, recorder_.getRecorderUUID());
        assertEquals(expectedContent, content);
    }
}
